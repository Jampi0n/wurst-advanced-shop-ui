package ItemConfigurationCompiletime

import ItemConfiguration
import LinkedList
import ObjectIds
import ErrorHandling
import JString

string currentDescription = ""

public function setInfo(string name, string desc)
    if currentDescription != ""
        error("currentDescription is not empty")
    if compiletime
        currentItemDefinition.setName(name)
        currentItemDefinition.setTooltipBasic(name)
        currentItemDefinition.setDescription(desc)
        currentItemDefinition.setTooltipExtended(desc)
    else
        currentItemInShop.setInfo(name, desc)

public function setInfo(string name)
    let tmp = currentDescription
    currentDescription = ""
    setInfo(name, tmp)

public function addLine(string text)
    currentDescription += text + "|n"
public function addText(string text)
    currentDescription += text
public function addPassive(string name, string desc)
    if currentDescription != ""
        currentDescription += "\n"
    currentDescription += COLOR_GOLD.toColorString() + name + ":|r|n" + desc
    if desc != ""
        currentDescription += "\n"
public function addUnique(string desc)
    if currentDescription != ""
        currentDescription += "\n"
    currentDescription += COLOR_GOLD.toColorString() + "Unique:|r|n" + desc
    if desc != ""
        currentDescription += "\n"
public function addActive(string name, string desc)
    if currentDescription != ""
        currentDescription += "\n"
    currentDescription += COLOR_GOLD.toColorString() + name + " (Active):|r|n" + desc
    if desc != ""
        currentDescription += "\n"
public function addStatLine(string statName, real modifier, bool percentage)
    addLine(("+{0}" + (percentage?"% ":" ") + statName).format(modifier.str()))
public function addStatLine(string statName, int modifier, bool percentage)
    addStatLine(statName, modifier.toReal(), percentage)

/**
Adds abilities and sets the item to be passive.
**/
public function setPassiveAbilities(vararg int ids)
    if compiletime
        let list = new LinkedList<int>
        for id in ids
            list.add(id)
        let result = commaList(list)
        currentItemDefinition.setAbilities(result)
        setCooldownGroup(result.substring(0, 4))
        currentItemDefinition.setActivelyUsed(false)

/**
Adds abilities and sets the item to be active.
The first ability should be the active one and will be used as cooldown group.
**/
public function setActiveAbilities(vararg int ids)
    if compiletime
        let list = new LinkedList<int>
        for id in ids
            list.add(id)
        let result = commaList(list)
        currentItemDefinition.setAbilities(result)
        setCooldownGroup(result.substring(0, 4))
        currentItemDefinition.setActivelyUsed(true)

public function setCooldownGroup(int id)
    if compiletime
        currentItemDefinition.setCooldownGroup(id.toRawCode())

public function setCooldownGroup(string str)
    if compiletime
        currentItemDefinition.setCooldownGroup(str)

public function consumable(int charges)
    if compiletime
        currentItemDefinition.setPerishable(true)
        currentItemDefinition.setNumberofCharges(charges)

public function consumable()
    consumable(1)
