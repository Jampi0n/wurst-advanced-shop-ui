package ShopUI

import ItemInShop
import HashMap
import Icons
import LinkedList
import TimerUtils
import ClosureTimers
import FrameWrapperDefinitions
import RecommendedItems
import ErrorHandling
import SoundUtils
import ClosureFrames
import ShopAPI
import ShopConfig
import ShopFunctionConfig
import Execute


constant SOUND_CLICK = new SoundDefinition(Sounds.mouseClick1, false, false)

constant MAX_RECIPE_TREE_LINKS = MAX_RECIPE_TREE_ICONS * 3

public function getChildXNew(real x, int childIndex, int numberOfChildren, real width) returns real
    if numberOfChildren == 1
        return x
    else
        let widthPerChild = width/numberOfChildren
        return (x - width/2) + widthPerChild/2 + childIndex/(numberOfChildren) * width

class RecipeTree

    RecipeTreeNode root
    ShopUI shopUI
    int usedButtons = 0
    HeroInventory inv
    bool completed = false

    construct(ShopUI shopUI, ItemInShop recipe)
        this.shopUI = shopUI
        this.root = new RecipeTreeNode(this, 15, 0, recipe, null)
        this.inv = null
        this.completed = true
        this.refresh()

    /*
        Recalculates costs and the checkmarks without recreating buttons or links.
    */
    function refresh()
        if not this.completed
            return

        if this.inv != null
            destroy this.inv
        this.inv = new HeroInventory(shopUI.getInventoryUnit())
        this.root.displayCost(true)

    ondestroy
        destroy this.root
        destroy this.inv
        this.root = null
        this.shopUI = null
        this.inv = null




class RecipeTreeNode

    real x
    int y
    int index
    real width
    RecipeTreeNode parent
    ItemInShop itm
    int children
    int childIndex
    ShopUI shopUI
    RecipeTree tree

    framehandle parentLink
    framehandle childLink
    framehandle childBar

    FrameButtonWithCost btn


    /*
        Each node can have up to 3 branches:
        0 -> branch to parent
        1 -> branch to child
        2 -> horizontal branch, if more than 1 child

        The index of the branch can then be calculated from the index of the node times 3 plus the offest from above.
    */

    static constant BRANCH_WIDTH = 0.005

    LinkedList<RecipeTreeNode> childrenList

    construct(RecipeTree tree, real x, int y, ItemInShop itm, RecipeTreeNode parent)
        this.tree = tree
        this.shopUI = tree.shopUI
        this.x = x
        this.y = y
        this.itm = itm
        this.childrenList = new LinkedList<RecipeTreeNode>
        this.parent = parent
        if parent != null
            this.width = parent.width / parent.children
        else
            this.width = 31
    
        this.index = this.tree.usedButtons
        if this.index >= MAX_RECIPE_TREE_ICONS
            error("Recipe " + tree.root.itm.getName() + " uses too many recipe icons: " + (this.index + 1).toString() + "/" + MAX_RECIPE_TREE_ICONS.toString())
        this.btn = this.shopUI.getRecipeTreeButton(this.index)
        this.tree.usedButtons++
        if this.shopUI.selectedItem == this.itm
            this.btn.setSelected(true)
        else
            this.btn.setSelected(false)

        this.shopUI.setRecipeTreeItem(this.index, this.itm)


        btn.frame()..clearAllPoints()
        ..setPoint(FRAMEPOINT_TOP, this.shopUI.frameRecipeTree, FRAMEPOINT_TOP, convertX(x), convertY(y))
        ..show()
        
        btn.setIcon(this.itm.getIcon())

        parentLink = this.shopUI.getBranch(index * 3)
        if y != 0
            this.shopUI.modifyBranch(parentLink, convertX(this.x)-BRANCH_WIDTH/2, convertY(this.y)+0.012, convertX(this.x) + BRANCH_WIDTH/2, convertY(this.y))
            parentLink.show()
        else
            parentLink.hide()

        if y < 2
            this.children =  this.itm.getRequirements().size()
            int i = 0
            for ItemInShop child in this.itm.getRequirements()
                let childNode = new RecipeTreeNode(this.tree, getChildXNew(this.x, i, this.children, this.width), this.y + 1, child, this)
                this.childrenList.add(childNode)
                i++

            this.childLink = this.shopUI.getBranch(index * 3 + 1)
            if this.children >= 1
                this.shopUI.modifyBranch(childLink, convertX(this.x)-BRANCH_WIDTH/2, convertY(this.y)-0.042, convertX(this.x) + BRANCH_WIDTH/2, convertY(this.y)-0.05)              
                childLink.show()
            else
                childLink.hide()
            
            this.childBar = this.shopUI.getBranch(index * 3 + 2)
            if this.children >= 2    
                let xFrom = convertX(getChildXNew(this.x, 0, this.children, this.width))
                let xTo = convertX(getChildXNew(this.x, this.children - 1, this.children, this.width))
                this.shopUI.modifyBranch(childBar, xFrom, convertY(this.y)-0.0525 +BRANCH_WIDTH/2, xTo, convertY(this.y)-0.0525 - BRANCH_WIDTH/2) 
                childBar.show()
            else
                childBar.hide()
        else
            this.children = 0


    function displayCheckedCost()

        btn.setChecked(true)
        btn.setCost(getItemCostForHero(this.tree.shopUI.getInventoryUnit(), this.itm))
        for RecipeTreeNode childNode in this.childrenList
            childNode.displayCheckedCost()


    function displayCost(bool root)


        if not root and this.tree.inv.useItem(this.itm.getItemId())
            displayCheckedCost()
        else
            btn.setChecked(false)
            for RecipeTreeNode childNode in this.childrenList
                childNode.displayCost(false)


            btn.setCost(getItemCostForHero(this.tree.shopUI.getInventoryUnit(), this.itm))


    ondestroy
        if this.childrenList.size() != this.children
            error("!!!")

        this.parentLink.hide()
        this.childLink.hide()
        this.childBar.hide()

        for RecipeTreeNode child in this.childrenList
            destroy child

    @inline
    static function convertX(real x) returns real
        return 0.24 * (x-15)/31

    @inline
    static function convertY(int y) returns real
        return -0.015 - (y * 0.062)


/*  API:
        openShop()
        closeShop()

    Everything else is handled internally.
*/
public class ShopUI
    private player forPlayer
    private unit inventoryUnit
    private bool enabled = false //is the ShopUI open?
    private bool enableOpen = false //can the ShopUI be opened?
    private int selectedRecipeButton = -1
    protected ItemInShop selectedRecipe
    private int itemsInRecipe
    protected ItemInShop selectedItem
    private int itemsInBuildsInto
    private int currentPage
    private int itemsOnPage
    private int inventoryUnitTypeId


    protected static ShopUI array playerUIs
    private int playerIndex

    protected framehandle frameShopUI
    protected framehandle frameItemList
    protected framehandle frameCategories
    protected framehandle frameRecipeTree
    protected framehandle frameBuildsInto
    protected framehandle frameItemDesc

    static constant buttonToIndex = new HashMap<int,int>

    protected static FrameButtonWithCost array itemListButtons
    constant onClickListButton = CreateTrigger()..addAction( () -> playerUIs[GetTriggerPlayer().getId()].onClickListButton() )

    private static FrameTextButton array categoryButton
    constant onClickCategoryButton = CreateTrigger()..addAction( () -> playerUIs[GetTriggerPlayer().getId()].onClickCategoryButton() )

    private static FrameButtonWithCost array recipeTreeButton
    private static ItemInShop array recipeTreeItem
    private static framehandle array recipeTreeBranch
    constant onClickRecipeTreeButton = CreateTrigger()..addAction( () -> playerUIs[GetTriggerPlayer().getId()].onClickRecipeTreeButton() )

    private static FrameButton array buildsIntoButton
    private static ItemInShop array buildsIntoItem
    constant onClickBuildsInto = CreateTrigger()..addAction( () -> playerUIs[GetTriggerPlayer().getId()].onClickBuildsInto() )


    private FrameTextButton buyButton
    private FrameButton itemIcon
    private framehandle itemTitle
    private framehandle itemDescription





    private RecipeTree recipeTree = null
   
    private static trigger onItemAcquire = CreateTrigger()
    private static trigger onItemLose = CreateTrigger()

    private bool canBuy = true
    private timer updateTimer = null
    private int currentCost = 0

    construct(player whichPlayer, unit inventoryUnit)
        execute() ->
            this.createUiElements()
        this.frameShopUI.hide()

        this.setInventoryUnit(inventoryUnit)
        this.inventoryUnitTypeId = this.inventoryUnit.getTypeId()
        if RECOMMENDED_CATEGORY != 0
            this.selectedItem = this.getItemFromList(0,0)
        else
            this.selectedItem = this.getItemFromList(1,0)
        this.selectedRecipe = this.selectedItem

        this.forPlayer = whichPlayer
        this.currentPage = -1
        this.itemsOnPage = 0
        this.itemsInBuildsInto = 0
        this.itemsInRecipe = 0

        this.playerIndex = whichPlayer.getId()
        playerUIs[this.playerIndex] = this
        //this.buttonMap = new HashMap<int,Button>()

        this.updateTimer = getTimer()..setData(this.playerIndex)

        if RECOMMENDED_CATEGORY != 0
            setPage(0)
        else
            setPage(1)
        this.selectRecipe(this.selectedItem, true)
        this.selectItem(this.selectedItem, true)

        onItemAcquire.registerPlayerUnitEvent(this.forPlayer, EVENT_PLAYER_UNIT_PICKUP_ITEM, null)
        onItemLose.registerPlayerUnitEvent(this.forPlayer, EVENT_PLAYER_UNIT_DROP_ITEM, null)

        this.closeShop()

    @noinline        
    protected static function classInit()
        onItemAcquire.addAction(function onItemGetStatic)
        onItemLose.addAction(function onItemDropStatic)
        configShopCategories()


    @noinline
    function createUiElements()
        let totalHeight = 0.38
        let totalWidth = 0.8
        let recipeTreeHeight = 0.2
        let itemDescHeight = 0.18
        let categoryWidth = 0.17
        let itemListWidth = 0.23
        let recipeTreeWidth = 0.27
        let buildsIntoWidth = 0.13
        let itemDescWidth = recipeTreeWidth + buildsIntoWidth
        this.frameShopUI = createFrame("TW_Shop_Window", GAME_UI, 0, 0)
        ..hide()

        ..setAbsPoint(FRAMEPOINT_TOPLEFT, 0.0, 0.55)
        ..setSize(totalWidth, totalHeight)
        this.frameCategories = createFrame("TW_Shop_Background", this.frameShopUI, 0, PermanentIndex.getNewIndex())
        ..setSize(categoryWidth, totalHeight)
        ..setPoint(FRAMEPOINT_TOPLEFT, this.frameShopUI, FRAMEPOINT_TOPLEFT, 0, 0)
        this.frameItemList = createFrame("TW_Shop_Background", this.frameShopUI, 0, PermanentIndex.getNewIndex())
        ..setSize(itemListWidth, totalHeight)
        ..setPoint(FRAMEPOINT_TOPLEFT, this.frameCategories, FRAMEPOINT_TOPRIGHT, 0, 0)
        this.frameRecipeTree = createFrame("TW_Shop_Background", this.frameShopUI, 0, PermanentIndex.getNewIndex())
        ..setSize(recipeTreeWidth, recipeTreeHeight)
        ..setPoint(FRAMEPOINT_TOPLEFT, this.frameItemList, FRAMEPOINT_TOPRIGHT, 0, 0)
        this.frameItemDesc = createFrame("TW_Shop_Background", this.frameShopUI, 0, PermanentIndex.getNewIndex())
        ..setSize(itemDescWidth, itemDescHeight)
        ..setPoint(FRAMEPOINT_TOPLEFT, this.frameRecipeTree, FRAMEPOINT_BOTTOMLEFT, 0, 0)
        this.frameBuildsInto = createFrame("TW_Shop_Background", this.frameShopUI, 0, PermanentIndex.getNewIndex())
        ..setSize(buildsIntoWidth, recipeTreeHeight)
        ..setPoint(FRAMEPOINT_TOPLEFT, this.frameRecipeTree, FRAMEPOINT_TOPRIGHT, 0, 0)

        // frame titles
        createFrame("TW_Shop_Title", this.frameCategories, 0, PermanentIndex.getNewIndex())
        ..setSize(categoryWidth - 0.04, 0.1)
        ..setPoint(FRAMEPOINT_TOP, this.frameCategories, FRAMEPOINT_TOP, 0, -0.01)
        ..setText("Categories:")
        ..setTextAlignment(TEXT_JUSTIFY_TOP, TEXT_JUSTIFY_CENTER)

        createFrame("TW_Shop_Title", this.frameItemList, 0, PermanentIndex.getNewIndex())
        ..setSize(itemListWidth - 0.04, 0.1)
        ..setPoint(FRAMEPOINT_TOP, this.frameItemList, FRAMEPOINT_TOP, 0, -0.01)
        ..setText("Item List:")
        ..setTextAlignment(TEXT_JUSTIFY_TOP, TEXT_JUSTIFY_CENTER)

        createFrame("TW_Shop_Title", this.frameRecipeTree, 0, PermanentIndex.getNewIndex())
        ..setSize(recipeTreeWidth - 0.04, 0.1)
        ..setPoint(FRAMEPOINT_TOP, this.frameRecipeTree, FRAMEPOINT_TOP, 0, -0.01)
        ..setText("Recipe Tree:")
        ..setTextAlignment(TEXT_JUSTIFY_TOP, TEXT_JUSTIFY_LEFT)

        createFrame("TW_Shop_Title", this.frameBuildsInto, 0, PermanentIndex.getNewIndex())
        ..setSize(buildsIntoWidth - 0.04, 0.1)
        ..setPoint(FRAMEPOINT_TOP, this.frameBuildsInto, FRAMEPOINT_TOP, 0, -0.01)
        ..setText("Builds Into:")
        ..setTextAlignment(TEXT_JUSTIFY_TOP, TEXT_JUSTIFY_CENTER)

        // categories

        for i = 0 to NUM_CATEGORIES - 1
            let fw = setCategoryButton(i, this.frameCategories.addTextButton(CATEGORY_NAMES[i]))
            let fh = fw.frame()
            fh.setPoint(FRAMEPOINT_TOP, this.frameCategories, FRAMEPOINT_TOP, 0, -0.03 - 0.035 * i)
            buttonToIndex.put(fh.getHandleId(), i)
            onClickCategoryButton.registerFrameEvent(fh, FRAMEEVENT_CONTROL_CLICK)

        // item list

        for i = 0 to MAX_ITEMS_IN_LIST - 1
            let fw = setListButton(i, this.frameItemList.addIconWithCost(Icons.bTNDaggerOfEscape, GetRandomInt(0, 4000)))
            let fh = fw.frame()
            fh.setPoint(FRAMEPOINT_TOPLEFT, this.frameItemList, FRAMEPOINT_TOPLEFT, 0.02 + 0.04 * (i mod 5), -0.038 - 0.052 * (i div 5))
            fh.hide()
            buttonToIndex.put(fh.getHandleId(), i)
            onClickListButton.registerFrameEvent(fh, FRAMEEVENT_CONTROL_CLICK)

        // recipe tree

        for i = 0 to MAX_RECIPE_TREE_ICONS - 1
            let fw = setRecipeTreeButton(i, this.frameRecipeTree.addIconWithCost(Icons.bTNTemp, 0))
            let fh = fw.frame()
            fh.setPoint(FRAMEPOINT_TOPLEFT, this.frameRecipeTree, FRAMEPOINT_TOPLEFT)
            fh.hide()
            buttonToIndex.put(fh.getHandleId(), i)
            setRecipeTreeItem(i, null)
            onClickRecipeTreeButton.registerFrameEvent(fh, FRAMEEVENT_CONTROL_CLICK)

        for i = 0 to MAX_RECIPE_TREE_LINKS - 1
            let fh = createFrame("TW_Shop_RecipeTreeBranch", this.frameRecipeTree, 0, PermanentIndex.getNewIndex())
            this.modifyBranch(fh, 0, 0, 0, 0)
            fh.hide()
            setBranch(i, fh)

        // builds into

        for i = 0 to MAX_BUILDS_INTO_ICONS - 1
            let fw = setBuildsIntoButton(i, this.frameBuildsInto.addIcon(Icons.bTNTemp))
            let fh = fw.frame()
            fh.setPoint(FRAMEPOINT_TOP, this.frameBuildsInto, FRAMEPOINT_TOP, 0.035 * ((i mod 3) - 1), -0.038 - 0.035 * (i div 3))
            fh.hide()
            buttonToIndex.put(fh.getHandleId(), i)
            onClickBuildsInto.registerFrameEvent(fh, FRAMEEVENT_CONTROL_CLICK)


        // item description

        this.itemIcon = this.frameItemDesc.addIcon(Icons.bTNTemp)
        itemIcon.frame().setPoint(FRAMEPOINT_TOPLEFT, this.frameItemDesc, FRAMEPOINT_TOPLEFT, 0.015, -0.015)
        this.itemTitle = createFrame("TW_Shop_Title", this.frameItemDesc, 0, PermanentIndex.getNewIndex())
        ..setPoint(FRAMEPOINT_LEFT, this.itemIcon.frame(), FRAMEPOINT_RIGHT, 0.01, 0)
        ..setText("Gauntlets of Ogre Strength")
        ..setSize(recipeTreeWidth - 0.034, 0.03)
        ..setTextAlignment(TEXT_JUSTIFY_MIDDLE, TEXT_JUSTIFY_LEFT)
        this.buyButton = this.frameItemDesc.addTextButton("Buy for: 0")
        buyButton.frame()..setPoint(FRAMEPOINT_TOPRIGHT, this.frameItemDesc, FRAMEPOINT_TOPRIGHT, -0.01, -0.015)
        ..onClick() () ->
            this.buyButton.frame()..setEnabled(false)..setEnabled(true)
            shopConfig_shopClickBuy(this.inventoryUnit, this.selectedItem)
        this.itemDescription = createFrame("TW_Shop_Text", this.frameItemDesc, 0, PermanentIndex.getNewIndex())
        ..setSize(itemDescWidth - 0.03, itemDescHeight - 0.02)
        ..setPoint(FRAMEPOINT_TOPLEFT, this.itemIcon.frame(), FRAMEPOINT_BOTTOMLEFT, 0, -0.005)
        ..setText("")
        

    @inline
    function getListButton(int index) returns FrameButtonWithCost
        return itemListButtons[(this castTo int) * MAX_ITEMS_IN_LIST + index]
    
    @inline        
    function setListButton(int index, FrameButtonWithCost fw) returns FrameButtonWithCost
        itemListButtons[(this castTo int) * MAX_ITEMS_IN_LIST + index] = fw
        return fw

    @inline
    function getCategoryButton(int index) returns FrameTextButton
        return categoryButton[(this castTo int) * NUM_CATEGORIES + index]
    
    @inline        
    function setCategoryButton(int index, FrameTextButton fw) returns FrameTextButton
        categoryButton[(this castTo int) * NUM_CATEGORIES + index] = fw
        return fw

    @inline
    function getRecipeTreeButton(int index) returns FrameButtonWithCost
        return recipeTreeButton[(this castTo int) * MAX_RECIPE_TREE_ICONS + index]
    
    @inline        
    function setRecipeTreeButton(int index, FrameButtonWithCost fw) returns FrameButtonWithCost
        recipeTreeButton[(this castTo int) * MAX_RECIPE_TREE_ICONS + index] = fw
        return fw

    @inline
    function getRecipeTreeItem(int index) returns ItemInShop
        return recipeTreeItem[(this castTo int) * MAX_RECIPE_TREE_ICONS + index]
    
    @inline        
    function setRecipeTreeItem(int index, ItemInShop fw) returns ItemInShop
        recipeTreeItem[(this castTo int) * MAX_RECIPE_TREE_ICONS + index] = fw
        return fw

    @inline
    function getBranch(int index) returns framehandle
        return recipeTreeBranch[(this castTo int) * MAX_RECIPE_TREE_LINKS + index]
    
    @inline        
    function setBranch(int index, framehandle branch) returns framehandle
        recipeTreeBranch[(this castTo int) * MAX_RECIPE_TREE_LINKS + index] = branch
        return branch

    @inline
    function getBuildsIntoButton(int index) returns FrameButton
        return buildsIntoButton[(this castTo int) * MAX_BUILDS_INTO_ICONS + index]
    
    @inline        
    function setBuildsIntoButton(int index, FrameButton fw) returns FrameButton
        buildsIntoButton[(this castTo int) * MAX_BUILDS_INTO_ICONS + index] = fw
        return fw

    @inline
    function getBuildsIntoItem(int index) returns ItemInShop
        return buildsIntoItem[(this castTo int) * MAX_BUILDS_INTO_ICONS + index]
    
    @inline        
    function setBuildsIntoItem(int index, ItemInShop fw) returns ItemInShop
        buildsIntoItem[(this castTo int) * MAX_BUILDS_INTO_ICONS + index] = fw
        return fw

    @inline     
    function modifyBranch(framehandle branch, real fromX, real fromY, real toX, real toY)
        branch.setPoint(FRAMEPOINT_TOPLEFT, this.frameRecipeTree, FRAMEPOINT_TOP, fromX, fromY)
        branch.setPoint(FRAMEPOINT_BOTTOMRIGHT, this.frameRecipeTree, FRAMEPOINT_TOP, toX, toY)

        
    function openShop()
        if this.enabled or not this.enableOpen 
            return

        this.enabled = true
        this.refreshRecipeTree()
        this.updateItemCost()
        this.updateBuyButton(true)
        this.updateTimer.startPeriodic(0.1, () -> playerUIs[GetExpiredTimer().getData()].updateBuyButton(false) )

        if GetLocalPlayer() == this.forPlayer
            this.frameShopUI.show()
            ClearSelection()
            EnableDragSelect(false, false)
            EnableSelect(false, false)
            SelectUnit(this.inventoryUnit, true)
            ClearTextMessages()

        shopConfig_onOpenShop(this.forPlayer)


    function closeShop()
        if not this.enabled
            return

        this.enabled = false
        this.updateTimer.pause()

        if GetLocalPlayer() == this.forPlayer
            this.frameShopUI.hide()
            EnableDragSelect(true, true)
            EnableSelect(true, true)

        shopConfig_onCloseShop(this.forPlayer)


    @inline
    private function loadItemListButton(int i)
        let itm = this.getItemFromList(this.currentPage, i)

        let buttonWithCost = this.getListButton(i)
        if itm == this.selectedRecipe
            //if GetLocalPlayer() == this.forPlayer
            this.selectedRecipeButton = i
            buttonWithCost.frame().show()
            buttonWithCost.setCost(itm.getTotalCost())
            buttonWithCost.setIcon(itm.getIcon())
            buttonWithCost.setSelected(true)
            buttonWithCost.setChecked(false)
            
        else
            //if GetLocalPlayer() == this.forPlayer
            buttonWithCost.frame().show()
            buttonWithCost.setCost(itm.getTotalCost())
            buttonWithCost.setIcon(itm.getIcon())
            buttonWithCost.setSelected(false)
            buttonWithCost.setChecked(false)



    private function refreshRecipeTree()
        if this.recipeTree != null
            this.recipeTree.refresh()

    private function loadRecipeTree()
        if this.selectedRecipe == null
            return

        let prevSize = itemsInRecipe


        if this.recipeTree != null
            destroy this.recipeTree
        this.recipeTree = new RecipeTree(this, this.selectedRecipe)
        this.itemsInRecipe = this.selectedRecipe.getVisibleRecipeSize()

        for i = itemsInRecipe to prevSize - 1
            this.getRecipeTreeButton(i).frame().hide()


    private function selectRecipe(ItemInShop newRecipe, bool forceRefresh)
        if newRecipe == this.selectedRecipe and not forceRefresh
            selectItem(newRecipe, false)
            return

        if this.selectedRecipeButton != -1
            this.getListButton(this.selectedRecipeButton).setSelected(false)

        this.selectedRecipe = newRecipe

        selectItem(newRecipe, false)


        //if one uses builds into, the selected Item remains the same, but recipe changes
        //if one selects a recipe on the left side, selected item is set to the recipe
        
        //load recipe
        loadRecipeTree()

        if this.currentPage == RECOMMENDED_CATEGORY
            let index = RecommendedItems.getIndex(this.inventoryUnitTypeId, newRecipe)
            if index != -1
                this.getListButton(index).setSelected(true)
                this.selectedRecipeButton = index
        else
            let cat = ItemInShop.getCategory(newRecipe)
            if cat == this.currentPage
                let index = ItemInShop.getIndex(newRecipe)
                this.getListButton(index).setSelected(true)
                this.selectedRecipeButton = index



    private function selectItem(ItemInShop newItem, bool forceRefresh)
        if newItem == this.selectedItem and not forceRefresh
            return


        this.selectedItem = newItem
        
        this.itemIcon.setIcon(newItem.getIcon())
        this.itemTitle.setText(newItem.getName())
        this.itemDescription.setText(newItem.getDescription())
        
        this.updateItemCost()
        this.updateBuyButton(true)
        
        for i = 0 to this.itemsInRecipe - 1
            this.getRecipeTreeButton(i).setSelected(this.getRecipeTreeItem(i) == this.selectedItem)


        let size = min(this.selectedItem.getBuildsInto().size(), 12)
        for i = size to itemsInBuildsInto - 1
            this.getBuildsIntoButton(i).frame().hide()
        this.itemsInBuildsInto = size

        int j = 0
        for ItemInShop itm in this.selectedItem.getBuildsInto()
            if j < MAX_BUILDS_INTO_ICONS
                let btn = this.getBuildsIntoButton(j)
                btn.frame().show()
                btn.setIcon(itm.getIcon())
                this.setBuildsIntoItem(j, itm)
                j++



    private function setPage(int newPage)
        if newPage == this.currentPage
            return

        this.selectedRecipeButton = -1

        this.currentPage = newPage

        let size = min(getItemCount(newPage), MAX_ITEMS_IN_LIST)
        for i = size to this.itemsOnPage
            this.getListButton(i).frame().hide()
        for i = 0 to size - 1
            loadItemListButton(i)

        this.itemsOnPage = size

    private function updateItemCost()
        this.currentCost = getItemCostForHero(this.inventoryUnit, this.selectedItem)
        this.buyButton.setName("Buy for: " + this.currentCost.toString())

    private function updateBuyButton(bool forceUpdate)
        bool canBuyNew
        if this.inventoryUnit == null
            canBuyNew = false
        else
            canBuyNew = shopConfig_shopCanBuy(this.inventoryUnit, this.selectedItem)

        canBuyNew = canBuyNew and this.currentCost <= this.forPlayer.getGold()

        if canBuyNew == this.canBuy and not forceUpdate
            return

        this.canBuy = canBuyNew
        this.buyButton.frame().setEnabled(canBuyNew)
            
    function getPlayer() returns player
        return this.forPlayer

    function getInventoryUnit() returns unit
        return this.inventoryUnit

    function setInventoryUnit(unit inventoryUnit)
        this.inventoryUnit = inventoryUnit
        if inventoryUnit != null

    function getItemFromList(int category, int index) returns ItemInShop
        if category == RECOMMENDED_CATEGORY
            if index < RecommendedItems.getCount(this.inventoryUnitTypeId)
                return RecommendedItems.getItem(this.inventoryUnitTypeId, index)
            else
                return null
        else
            return ItemInShop.getItemFromList(category, index)
    
    function getItemCount(int category) returns int
        if category == RECOMMENDED_CATEGORY
            return RecommendedItems.getCount(this.inventoryUnitTypeId)
        else
            return ItemInShop.getItemCount(category)

    function selectFirst()
        let itm = getItemFromList(STARTING_CATEGORY,STARTING_ITEM)
        if itm == null
            return
        else
            this.selectRecipe(itm, true)
            this.setPage(STARTING_CATEGORY)

    function start(unit heroUnit)
        this.setInventoryUnit(heroUnit)
        this.inventoryUnitTypeId = heroUnit.getTypeId()
        this.selectFirst()
        this.enableOpen = true

    function isEnabled() returns bool
        return this.enabled

    @inline
    private function clickAnyButton()
        SOUND_CLICK.playForPlayer(this.forPlayer).snd.setVolume(125)

    private function onClickCategoryButton()
        let fh = BlzGetTriggerFrame()
        let index = buttonToIndex.get(fh.getHandleId())
        fh..setEnabled(false)..setEnabled(true)
        setPage(index)

    private function onClickListButton()
        let fh = BlzGetTriggerFrame()
        let index = buttonToIndex.get(fh.getHandleId())
        fh..setEnabled(false)..setEnabled(true)
        let clickedItem = this.getItemFromList(this.currentPage, index)
        if clickedItem != null
            selectRecipe(clickedItem, false)
            clickAnyButton()

    private function onClickRecipeTreeButton()
        let fh = BlzGetTriggerFrame()
        let index = buttonToIndex.get(fh.getHandleId())
        fh..setEnabled(false)..setEnabled(true)
        this.selectItem(this.getRecipeTreeItem(index), false)
        clickAnyButton()

    private function onClickBuildsInto()
        let fh = BlzGetTriggerFrame()
        let index = buttonToIndex.get(fh.getHandleId())
        fh..setEnabled(false)..setEnabled(true)
        this.selectRecipe(this.getBuildsIntoItem(index), false)


    private function onItemGet(item _itm)
        if this.enabled
            doAfter(0) ->
                this.refreshRecipeTree()
                this.updateItemCost()

    private static function onItemGetStatic()
        let u = GetTriggerUnit()
        let shopUI = playerUIs[u.getOwner().getId()]
        if shopUI != null and shopUI.inventoryUnit == u
            shopUI.onItemGet(GetManipulatedItem())

    private function onItemDrop(item _itm)
        if this.enabled
            doAfter(0) ->
                this.refreshRecipeTree()
                this.updateItemCost()

    private static function onItemDropStatic()
        let u = GetTriggerUnit()
        let shopUI = playerUIs[u.getOwner().getId()]
        if shopUI != null and shopUI.inventoryUnit == u
            shopUI.onItemDrop(GetManipulatedItem())




init
    print(loadTOCFile("tw_shop.toc"))
    ShopUI.classInit()