package ShopUI

import ItemInShop
import LinkedList
import TimerUtils
import ClosureTimers
import RecommendedItems
import ErrorHandling
import SoundUtils
import ShopAPI
import ShopConfig
import ShopFunctionConfig
import Execute
import ShopAppearance

constant SOUND_CLICK = new SoundDefinition(Sounds.mouseClick1, false, false)

constant MAX_RECIPE_TREE_LINKS = MAX_RECIPE_TREE_ICONS * 3

function getChildXNew(real x, int childIndex, int numberOfChildren, real width) returns real
    if numberOfChildren == 1
        return x
    else
        let widthPerChild = width/numberOfChildren
        return (x - width/2) + widthPerChild/2 + childIndex/(numberOfChildren) * width

class RecipeTree

    RecipeTreeNode root
    ShopUI shopUI
    int usedButtons = 0
    HeroInventory inv
    bool completed = false

    construct(ShopUI shopUI, ItemInShop recipe)
        this.shopUI = shopUI
        this.root = new RecipeTreeNode(this, 0, 0, recipe, null)
        this.inv = null
        this.completed = true
        this.refresh()

    /*
        Recalculates costs and the checkmarks without recreating buttons or links.
    */
    function refresh()
        if not this.completed
            return

        if this.inv != null
            destroy this.inv
        this.inv = new HeroInventory(shopUI.getInventoryUnit())
        this.root.displayCost(true)

    ondestroy
        destroy this.root
        destroy this.inv
        this.root = null
        this.shopUI = null
        this.inv = null




class RecipeTreeNode

    real x
    int y
    int index
    real width
    RecipeTreeNode parent
    ItemInShop itm
    int children
    int childIndex
    ShopUI shopUI
    RecipeTree tree



    /*
        Each node can have up to 3 branches:
        0 -> branch to parent
        1 -> branch to child
        2 -> horizontal branch, if more than 1 child

        The index of the branch can then be calculated from the index of the node times 3 plus the offest from above.
    */

    static constant BRANCH_WIDTH = 0.005

    LinkedList<RecipeTreeNode> childrenList

    construct(RecipeTree tree, real x, int y, ItemInShop itm, RecipeTreeNode parent)
        this.tree = tree
        this.shopUI = tree.shopUI
        this.x = x
        this.y = y
        this.itm = itm
        this.childrenList = new LinkedList<RecipeTreeNode>
        this.parent = parent
        if parent != null
            this.width = parent.width / parent.children
        else
            this.width = 2.0
    
        this.index = this.tree.usedButtons
        if this.index >= MAX_RECIPE_TREE_ICONS
            error("Recipe " + tree.root.itm.getName() + " uses too many recipe icons: " + (this.index + 1).toString() + "/" + MAX_RECIPE_TREE_ICONS.toString())
        this.tree.usedButtons++
        let appearance = this.shopUI.appearance
        appearance.recipeTreeButtonVisible(index, true)
        appearance.recipeTreeButtonSelect(index, this.shopUI.selectedItem == this.itm)
        this.shopUI.setRecipeTreeItem(this.index, this.itm)
        appearance.recipeTreeButtonSetXY(index, x, y)

        appearance.recipeTreeButtonSetItem(index, itm)


        if y < VISIBLE_RECIPE_TREE_HEIGHT - 1
            this.children =  this.itm.getRequirements().size()
            int i = 0
            for ItemInShop child in this.itm.getRequirements()
                let childNode = new RecipeTreeNode(this.tree, getChildXNew(this.x, i, this.children, this.width), this.y + 1, child, this)
                this.childrenList.add(childNode)
                i++

            let childIndexList = this.childrenList.map() (RecipeTreeNode t) ->
                return t.index
            appearance.recipeTreeButtonConnect(index, childIndexList)
            destroy childIndexList
        else
            appearance.recipeTreeButtonConnect(index, null)
            this.children = 0


    function displayCheckedCost()
        let appearance = this.shopUI.appearance
        appearance.recipeTreeButtonCheck(index, true)
        appearance.recipteTreeButtonSetCost(index, getItemCostForHero(this.tree.shopUI.getInventoryUnit(), this.itm))
        for RecipeTreeNode childNode in this.childrenList
            childNode.displayCheckedCost()


    function displayCost(bool root)
        if not root and this.tree.inv.useItem(this.itm.getItemId())
            displayCheckedCost()
        else
            let appearance = this.shopUI.appearance
            appearance.recipeTreeButtonCheck(index, false)
            
            for RecipeTreeNode childNode in this.childrenList
                childNode.displayCost(false)

            appearance.recipteTreeButtonSetCost(index, getItemCostForHero(this.tree.shopUI.getInventoryUnit(), this.itm))


    ondestroy
        if this.childrenList.size() != this.children
            error("!!!")
            let appearance = this.shopUI.appearance
            appearance.recipeTreeButtonConnect(index, null)
            appearance.recipeTreeButtonVisible(index, false)

        for RecipeTreeNode child in this.childrenList
            destroy child

    @inline
    static function convertX(real x) returns real
        return 0.24 * (x-15)/31

    @inline
    static function convertY(int y) returns real
        return -0.015 - (y * 0.062)


/*  API:
        openShop()
        closeShop()

    Everything else is handled internally.
*/
public class ShopUI
    private player forPlayer
    private unit inventoryUnit
    private bool enabled = false //is the ShopUI open?
    private bool enableOpen = false //can the ShopUI be opened?
    private int selectedRecipeButton = -1
    protected ItemInShop selectedRecipe
    private int itemsInRecipe
    protected ItemInShop selectedItem
    private int itemsInBuildsInto
    private int currentPage
    private int itemsOnPage
    private int inventoryUnitTypeId


    protected static ShopUI array playerUIs
    private int playerIndex


    private static ItemInShop array recipeTreeItem
    private static ItemInShop array buildsIntoItem

    private RecipeTree recipeTree = null
   
    private static trigger onItemAcquire = CreateTrigger()
    private static trigger onItemLose = CreateTrigger()

    private bool canBuy = true
    private timer updateTimer = null
    private int currentCost = 0

    protected ShopAppearance appearance

    construct(player whichPlayer, unit inventoryUnit, ShopAppearance appearance)
        this.setup(whichPlayer, inventoryUnit, appearance)

    construct(player whichPlayer, unit inventoryUnit)
        this.setup(whichPlayer, inventoryUnit, new ShopAppearance())

    private function setup(player whichPlayer, unit inventoryUnit, ShopAppearance appearance)
        this.appearance = appearance
        execute() ->
            this.createUiElements()
        appearance.shopBackgroundvisible(false)

        this.setInventoryUnit(inventoryUnit)
        this.inventoryUnitTypeId = this.inventoryUnit.getTypeId()
        if RECOMMENDED_CATEGORY != 0
            this.selectedItem = this.getItemFromList(0,0)
        else
            this.selectedItem = this.getItemFromList(1,0)
        this.selectedRecipe = this.selectedItem

        this.forPlayer = whichPlayer
        this.currentPage = -1
        this.itemsOnPage = 0
        this.itemsInBuildsInto = 0
        this.itemsInRecipe = 0

        this.playerIndex = whichPlayer.getId()
        playerUIs[this.playerIndex] = this
        //this.buttonMap = new HashMap<int,Button>()

        this.updateTimer = getTimer()..setData(this.playerIndex)

        if RECOMMENDED_CATEGORY != 0
            setPage(0)
        else
            setPage(1)
        this.selectRecipe(this.selectedItem, true)
        this.selectItem(this.selectedItem, true)

        onItemAcquire.registerPlayerUnitEvent(this.forPlayer, EVENT_PLAYER_UNIT_PICKUP_ITEM, null)
        onItemLose.registerPlayerUnitEvent(this.forPlayer, EVENT_PLAYER_UNIT_DROP_ITEM, null)

        this.closeShop()

    @noinline        
    protected static function classInit()
        onItemAcquire.addAction(function onItemGetStatic)
        onItemLose.addAction(function onItemDropStatic)

    @noinline
    private function createUiElements()
        appearance.shopBackgroundCreate()

        // categories
        appearance.pageBackgroundCreate()
        for i = 0 to ItemInShop.getNumPages() - 1
            appearance.pageButtonCreate(i, getPageName(i))
            appearance.pageButtonSelect(i, false)

        // item list
        appearance.itemListBackgroundCreate()
        for i = 0 to MAX_ITEMS_IN_LIST - 1
            appearance.itemListButtonCreate(i)
            
        // recipe tree
        appearance.recipeTreeBackgroundCreate()
        for i = 0 to MAX_RECIPE_TREE_ICONS - 1
            appearance.recipeTreeButtonCreate(i)
        
        // builds into
        appearance.buildsIntoBackgroundCreate()
        for i = 0 to MAX_BUILDS_INTO_ICONS - 1
            appearance.buildsIntoButtonCreate(i)

        // item description

        appearance.tooltipBackgroundCreate()
        

    @inline
    protected function getRecipeTreeItem(int index) returns ItemInShop
        return recipeTreeItem[(this castTo int) * MAX_RECIPE_TREE_ICONS + index]
    
    @inline        
    function setRecipeTreeItem(int index, ItemInShop fw) returns ItemInShop
        recipeTreeItem[(this castTo int) * MAX_RECIPE_TREE_ICONS + index] = fw
        return fw

    @inline
    protected function getBuildsIntoItem(int index) returns ItemInShop
        return buildsIntoItem[(this castTo int) * MAX_BUILDS_INTO_ICONS + index]
    
    @inline        
    protected function setBuildsIntoItem(int index, ItemInShop fw) returns ItemInShop
        buildsIntoItem[(this castTo int) * MAX_BUILDS_INTO_ICONS + index] = fw
        return fw
        
    function openShop()
        if this.enabled or not this.enableOpen 
            return

        this.enabled = true
        this.refreshRecipeTree()
        this.updateItemCost()
        this.updateBuyButton(true)
        this.updateTimer.startPeriodic(0.1, () -> playerUIs[GetExpiredTimer().getData()].updateBuyButton(false) )

        if GetLocalPlayer() == this.forPlayer
            appearance.shopBackgroundvisible(true)
            ClearSelection()
            EnableDragSelect(false, false)
            EnableSelect(false, false)
            SelectUnit(this.inventoryUnit, true)
            ClearTextMessages()

        shopConfig_onOpenShop(this.forPlayer)


    function closeShop()
        if not this.enabled
            return

        this.enabled = false
        this.updateTimer.pause()

        if GetLocalPlayer() == this.forPlayer
            appearance.shopBackgroundvisible(false)
            EnableDragSelect(true, true)
            EnableSelect(true, true)

        shopConfig_onCloseShop(this.forPlayer)


    @inline
    private function loadItemListButton(int i)
        let itm = this.getItemFromList(this.currentPage, i)
        if itm == this.selectedRecipe
            this.selectedRecipeButton = i
            appearance.itemListButtonVisible(i, true)
            appearance.itemListButtonSetItem(i, itm)
            appearance.itemListButtonSelect(i, true)
        else
            appearance.itemListButtonVisible(i, true)
            appearance.itemListButtonSetItem(i, itm)
            appearance.itemListButtonSelect(i, false)


    private function refreshRecipeTree()
        if this.recipeTree != null
            this.recipeTree.refresh()

    private function loadRecipeTree()
        if this.selectedRecipe == null
            return

        let prevSize = itemsInRecipe


        if this.recipeTree != null
            destroy this.recipeTree
        this.recipeTree = new RecipeTree(this, this.selectedRecipe)
        this.itemsInRecipe = this.selectedRecipe.getVisibleRecipeSize()

        for i = itemsInRecipe to prevSize - 1
            appearance.recipeTreeButtonVisible(i, false)


    function selectRecipe(ItemInShop newRecipe, bool forceRefresh)
        if newRecipe == this.selectedRecipe and not forceRefresh
            selectItem(newRecipe, false)
            return

        if this.selectedRecipeButton != -1
            appearance.itemListButtonSelect(this.selectedRecipeButton, false)

        this.selectedRecipe = newRecipe

        selectItem(newRecipe, false)


        //if one uses builds into, the selected Item remains the same, but recipe changes
        //if one selects a recipe on the left side, selected item is set to the recipe
        
        //load recipe
        loadRecipeTree()

        if this.currentPage == RECOMMENDED_CATEGORY
            let index = RecommendedItems.getIndex(this.inventoryUnitTypeId, newRecipe)
            if index != -1
                appearance.itemListButtonSelect(index, true)
                this.selectedRecipeButton = index
        else
            let cat = ItemInShop.getCategory(newRecipe)
            if cat == this.currentPage
                let index = ItemInShop.getIndex(newRecipe)
                appearance.itemListButtonSelect(index, true)
                this.selectedRecipeButton = index



    function selectItem(ItemInShop newItem, bool forceRefresh)
        if newItem == this.selectedItem and not forceRefresh
            return


        this.selectedItem = newItem
        
        appearance.tooltipSetItem(newItem)
        
        this.updateItemCost()
        this.updateBuyButton(true)
        
        for i = 0 to this.itemsInRecipe - 1
            appearance.recipeTreeButtonSelect(i, this.getRecipeTreeItem(i) == this.selectedItem)

        let size = min(this.selectedItem.getBuildsInto().size(), 12)
        for i = size to itemsInBuildsInto - 1
            appearance.buildsIntoButtonvisible(i, false)
        this.itemsInBuildsInto = size

        int j = 0
        for ItemInShop itm in this.selectedItem.getBuildsInto()
            if j < MAX_BUILDS_INTO_ICONS
                appearance.buildsIntoButtonvisible(j, true)
                appearance.buildsIntoButtonSetItem(j, itm)
                this.setBuildsIntoItem(j, itm)
                j++

    function getPage() returns int
        return this.currentPage

    function getNumPages() returns int
        return ItemInShop.getNumPages()

    function getPageName(int index) returns string
        return ItemInShop.getPageName(index)

    function setPage(int newPage)
        if newPage == this.currentPage
            return

        if currentPage != -1
            appearance.pageButtonSelect(this.currentPage, false)
        appearance.pageButtonSelect(newPage, true)
        this.selectedRecipeButton = -1

        this.currentPage = newPage

        let size = min(getItemCount(newPage), MAX_ITEMS_IN_LIST)
        for i = size to this.itemsOnPage
            appearance.itemListButtonVisible(i, false)
        for i = 0 to size - 1
            loadItemListButton(i)

        this.itemsOnPage = size

    private function updateItemCost()
        this.currentCost = getItemCostForHero(this.inventoryUnit, this.selectedItem)
        appearance.tooltipSetBuyCost(this.currentCost)

    private function updateBuyButton(bool forceUpdate)
        bool canBuyNew
        if this.inventoryUnit == null
            canBuyNew = false
        else
            canBuyNew = shopConfig_shopCanBuy(this.inventoryUnit, this.selectedItem)

        canBuyNew = canBuyNew and this.currentCost <= this.forPlayer.getGold()

        if canBuyNew == this.canBuy and not forceUpdate
            return

        this.canBuy = canBuyNew
        appearance.tooltipToggleBuy(canBuyNew)
            
    function getPlayer() returns player
        return this.forPlayer

    function getInventoryUnit() returns unit
        return this.inventoryUnit

    function setInventoryUnit(unit inventoryUnit)
        this.inventoryUnit = inventoryUnit
        if inventoryUnit != null

    function getItemFromList(int category, int index) returns ItemInShop
        if category == RECOMMENDED_CATEGORY
            if index < RecommendedItems.getCount(this.inventoryUnitTypeId)
                return RecommendedItems.getItem(this.inventoryUnitTypeId, index)
            else
                return null
        else
            return ItemInShop.getItemFromList(category, index)
    
    function getItemCount(int category) returns int
        if category == RECOMMENDED_CATEGORY
            return RecommendedItems.getCount(this.inventoryUnitTypeId)
        else
            return ItemInShop.getItemCount(category)

    private function selectFirst()
        let itm = getItemFromList(STARTING_CATEGORY,STARTING_ITEM)
        if itm == null
            return
        else
            this.selectRecipe(itm, true)
            this.setPage(STARTING_CATEGORY)

    function start(unit heroUnit)
        this.setInventoryUnit(heroUnit)
        this.inventoryUnitTypeId = heroUnit.getTypeId()
        this.selectFirst()
        this.enableOpen = true

    function isEnabled() returns bool
        return this.enabled

    function getAppearance() returns ShopAppearance
        return this.appearance

    @inline
    private function clickAnyButton()
        SOUND_CLICK.playForPlayer(this.forPlayer).snd.setVolume(125)

    private function onItemGet(item _itm)
        if this.enabled
            doAfter(0) ->
                this.refreshRecipeTree()
                this.updateItemCost()

    private static function onItemGetStatic()
        let u = GetTriggerUnit()
        let shopUI = playerUIs[u.getOwner().getId()]
        if shopUI != null and shopUI.inventoryUnit == u
            shopUI.onItemGet(GetManipulatedItem())

    private function onItemDrop(item _itm)
        if this.enabled
            doAfter(0) ->
                this.refreshRecipeTree()
                this.updateItemCost()

    private static function onItemDropStatic()
        let u = GetTriggerUnit()
        let shopUI = playerUIs[u.getOwner().getId()]
        if shopUI != null and shopUI.inventoryUnit == u
            shopUI.onItemDrop(GetManipulatedItem())

    static function clickPage(player p, int index)
        playerUIs[p.getId()].setPage(index)
    static function clickBuildsInto(player p, int index)
        let shopUI = playerUIs[p.getId()]
        shopUI.selectRecipe(shopUI.getBuildsIntoItem(index), false)
    static function clickRecipeTree(player p, int index)
        let shopUI = playerUIs[p.getId()]
        shopUI.selectItem(shopUI.getRecipeTreeItem(index), false)
        shopUI.clickAnyButton()
    static function clickList(player p, int index)
        let shopUI = playerUIs[p.getId()]
        let clickedItem = shopUI.getItemFromList(shopUI.currentPage, index)
        if clickedItem != null
            shopUI.selectRecipe(clickedItem, false)
            shopUI.clickAnyButton()
    static function clickBuy(player p)
        let shopUI = playerUIs[p.getId()]
        shopConfig_shopClickBuy(shopUI.getInventoryUnit(), shopUI.selectedItem)




init
    ShopUI.classInit()
